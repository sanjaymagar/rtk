{"version":3,"sources":["redux-toolkit.ts","App/index.tsx","index.tsx"],"names":["TodoInitialState","id","uuid","desc","isComplete","todoSlice","createSlice","name","initialState","reducers","create","reducer","state","payload","push","prepare","edit","todoToEdit","find","todo","toggle","todoToToggle","remove","indexToRemove","findIndex","splice","filter","selectedTodoSlice","select","counterSlice","extraReducers","actions","type","createTodoActionCreator","editTodoActionCreator","toggleTodoActionCreator","deleteTodoActionCreator","selectTodoActionCreator","todos","selectedTodo","counter","configureStore","App","dispatch","useDispatch","useSelector","selectedTodoId","editedCount","useState","newTodoInput","setNewTodoInput","editTodoInput","setEditTodoInput","isEditMode","setIsEditMode","editInput","useRef","console","log","useEffect","current","focus","handleCancelUpdate","e","preventDefault","className","onSubmit","length","htmlFor","onChange","target","value","map","i","key","onClick","todoId","ref","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.55671b4e.chunk.js","sourcesContent":["import { createSlice, PayloadAction, configureStore } from '@reduxjs/toolkit';\nimport { v1 as uuid } from 'uuid';\n\nimport { Todo } from './type';\n\nconst TodoInitialState: Todo[] = [\n  {\n    id: uuid(),\n    desc: 'Learn React',\n    isComplete: true,\n  },\n  {\n    id: uuid(),\n    desc: 'Learn Redux',\n    isComplete: true,\n  },\n  {\n    id: uuid(),\n    desc: 'Learn Redux-ToolKit',\n    isComplete: false,\n  },\n];\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: TodoInitialState,\n  reducers: {\n    create: {\n      reducer: (\n        state,\n        {\n          payload,\n        }: PayloadAction<{ id: string; desc: string; isComplete: boolean }>\n      ) => {\n        state.push(payload);\n      },\n      prepare: ({ desc }: { desc: string }) => ({\n        payload: {\n          id: uuid(), // since inpure funtion uuid() can't be use on pure function\n          desc,\n          isComplete: false,\n        },\n      }),\n    },\n    edit: (\n      state,\n      { payload: { id, desc } }: PayloadAction<{ id: string; desc: string }>\n    ) => {\n      const todoToEdit = state.find(todo => todo.id === id);\n      if (todoToEdit) {\n        todoToEdit.desc = desc;\n      }\n    },\n    toggle: (\n      state,\n      {\n        payload: { id, isComplete },\n      }: PayloadAction<{ id: string; isComplete: boolean }>\n    ) => {\n      const todoToToggle = state.find(todo => todo.id === id);\n      if (todoToToggle) {\n        todoToToggle.isComplete = isComplete;\n      }\n    },\n    remove: (state, { payload: { id } }: PayloadAction<{ id: string }>) => {\n      const indexToRemove = state.findIndex(todo => todo.id === id);\n      if (indexToRemove) {\n        state.splice(indexToRemove, 1);\n        state.filter(todo => todo.id !== id);\n      }\n    },\n  },\n});\n\nconst selectedTodoSlice = createSlice({\n  name: 'selectedTodo',\n  initialState: null as string | null,\n  reducers: {\n    select: (state, { payload: { id } }: PayloadAction<{ id: string }>) => id,\n  },\n});\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: 0,\n  reducers: {},\n  extraReducers: {\n    [todoSlice.actions.create.type]: state => state + 1,\n    [todoSlice.actions.edit.type]: state => state + 1,\n    [todoSlice.actions.toggle.type]: state => state + 1,\n    [todoSlice.actions.remove.type]: state => state + 1,\n  },\n});\n\nexport const {\n  create: createTodoActionCreator,\n  edit: editTodoActionCreator,\n  toggle: toggleTodoActionCreator,\n  remove: deleteTodoActionCreator,\n} = todoSlice.actions;\n\nexport const { select: selectTodoActionCreator } = selectedTodoSlice.actions;\n\nconst reducer = {\n  todos: todoSlice.reducer,\n  selectedTodo: selectedTodoSlice.reducer,\n  counter: counterSlice.reducer,\n};\n\nexport default configureStore({ reducer });\n","import React, {\n  ChangeEvent,\n  FormEvent,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { State } from '../type';\nimport './App.css';\n// import {\n//   createTodoActionCreator,\n//   selectTodoActionCreator,\n//   editTodoActionCreator,\n//   toggleTodoActionCreator,\n//   deleteTodoActionCreator,\n// } from '../redux-og';\n\nimport {\n  createTodoActionCreator,\n  selectTodoActionCreator,\n  editTodoActionCreator,\n  toggleTodoActionCreator,\n  deleteTodoActionCreator,\n} from '../redux-toolkit';\n\nconst App = function() {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: State) => state.todos);\n  const selectedTodoId = useSelector((state: State) => state.selectedTodo);\n  const editedCount = useSelector((state: State) => state.counter);\n\n  const [newTodoInput, setNewTodoInput] = useState<string>('');\n  const [editTodoInput, setEditTodoInput] = useState<string>('');\n  const [isEditMode, setIsEditMode] = useState<boolean>(false);\n  const editInput = useRef<HTMLInputElement>(null);\n\n  const selectedTodo =\n    (selectedTodoId && todos.find(todo => todo.id === selectedTodoId)) || null;\n\n  console.log({ selectedTodoId, selectedTodo });\n\n  const handleNewInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setNewTodoInput(e.target.value);\n  };\n\n  const handleEditInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setEditTodoInput(e.target.value);\n  };\n\n  const handleCreateNewTodo = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (!newTodoInput.length) return;\n    dispatch(createTodoActionCreator({ desc: newTodoInput }));\n    setNewTodoInput('');\n  };\n\n  const handleSelectTodo = (todoId: string) => (): void => {\n    dispatch(selectTodoActionCreator({ id: todoId }));\n  };\n\n  const handleEdit = (): void => {\n    if (!selectedTodo) return;\n\n    setEditTodoInput(selectedTodo.desc);\n    setIsEditMode(true);\n  };\n\n  useEffect(() => {\n    if (isEditMode) {\n      editInput?.current?.focus();\n    }\n  }, [isEditMode]);\n\n  const handleUpdate = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    if (!editTodoInput.length || !selectedTodoId) {\n      handleCancelUpdate();\n      return;\n    }\n\n    dispatch(\n      editTodoActionCreator({ id: selectedTodoId, desc: editTodoInput })\n    );\n\n    setIsEditMode(false);\n    setEditTodoInput('');\n  };\n\n  const handleCancelUpdate = (\n    e?: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    e?.preventDefault();\n    setIsEditMode(false);\n    setEditTodoInput('');\n  };\n\n  const handleToggle = (): void => {\n    if (!selectedTodoId || !selectedTodo) return;\n\n    dispatch(\n      toggleTodoActionCreator({\n        id: selectedTodoId,\n        isComplete: !selectedTodo.isComplete,\n      })\n    );\n  };\n\n  const handleDelete = (): void => {\n    if (!selectedTodoId) return;\n    dispatch(deleteTodoActionCreator({ id: selectedTodoId }));\n  };\n\n  return (\n    <div className='App'>\n      <div className='App__counter'>Todos Updated Count: {editedCount}</div>\n      <div className='App__header'>\n        <h1>Todo: Redux vs RTK Edition</h1>\n        <form onSubmit={handleCreateNewTodo}>\n          <label htmlFor='new-todo'>Add new:</label>\n          <input\n            onChange={handleNewInputChange}\n            id='new-todo'\n            value={newTodoInput}\n          />\n          <button type='submit'>Create</button>\n        </form>\n      </div>\n      <div className='App__body'>\n        <ul className='App__list'>\n          <h2>My Todos:</h2>\n          {todos.map((todo, i) => (\n            <li\n              className={`${todo.isComplete ? 'done' : ''} ${\n                todo.id === selectedTodoId ? 'active' : ''\n              }`}\n              key={todo.id}\n              onClick={handleSelectTodo(todo.id)}\n            >\n              <span className='list-number'>{i + 1})</span> {todo.desc}\n            </li>\n          ))}\n        </ul>\n        <div className='App_todo-info'>\n          <h2>Selected Todo:</h2>\n          {selectedTodo === null ? (\n            <span className='empty-state'>No Todo Selected</span>\n          ) : !isEditMode ? (\n            <>\n              <span\n                className={`todo-desc ${\n                  selectedTodo?.isComplete ? 'done' : ''\n                }`}\n              >\n                {selectedTodo.desc}\n              </span>\n              <div className='todo-actions'>\n                <button onClick={handleEdit}>Edit</button>\n                <button onClick={handleToggle}>Toggle</button>\n                <button onClick={handleDelete}>Delete</button>\n              </div>\n            </>\n          ) : (\n            <form onSubmit={handleUpdate}>\n              <label htmlFor='edit-todo'>Edit:</label>\n              <input\n                ref={editInput}\n                onChange={handleEditInputChange}\n                value={editTodoInput}\n              />\n              <button type='submit'>Update</button>\n              <button onClick={handleCancelUpdate}>Cancel</button>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import store from './redux-og';\nimport store from './redux-toolkit';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}